# this will be used to compose
baseDomain: local.me

# versions (own components)
# (using this notation for easier replacement with webhooks)
# we use our own iracelog-app.images template to handle these
ismVersion: v0.31.1
graphqlVersion: v0.6.0
iracelogVersion: v0.35.0

iracelogDomain: "iracelog.{{ .Values.baseDomain }}"
graphqlDomain: "graphql.{{ .Values.baseDomain }}"
grpcDomain: "grpc.{{ .Values.baseDomain }}"
tenantId: "" # may be empty

ingress:
  standard:
    enabled: false
  traefik:
    enabled: true

# global:
# imageRegistry: ghcr.io

ism:
  registry: ghcr.io
  repository: mpapenbr/iracelog-service-manager-go
  secrets:
    adminToken: null
    providerToken: null
  resourcesPreset: micro
  containerPorts:
    http: 8080
  service:
    type: ClusterIP
    ports:
      http: 8080
    nodePorts:
      http: ""
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerClass: ""
    loadBalancerSourceRanges: []
    annotation: {}
    extraPorts: []
  # resources:
  #   requests:
  #     cpu: 250m
  #     memory: 20Mi
  #   limits:
  #     memory: 200Mi
  #     cpu: 1000m
  ingress:
    enabled: true
    hostname: iracelog.local
    path: "/"
    pathType: Prefix
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
      traefik.ingress.kubernetes.io/router.tls: "true"
    tls: true

graphql:
  registry: ghcr.io
  repository: mpapenbr/iracelog-graphql
  secrets:
    adminToken: null
    providerToken: null
  resourcesPreset: micro
  containerPorts:
    http: 8080
  service:
    type: ClusterIP
    ports:
      http: 8080
    nodePorts:
      http: ""
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerClass: ""
    loadBalancerSourceRanges: []
    annotation: {}
    extraPorts: []
  # resources:
  #   requests:
  #     cpu: 250m
  #     memory: 20Mi
  #   limits:
  #     memory: 200Mi
  #     cpu: 1000m
  ingress:
    enabled: true
    hostname: iracelog.local
    path: "/"
    pathType: Prefix
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
      traefik.ingress.kubernetes.io/router.tls: "true"
    tls: true

frontend:
  registry: ghcr.io
  repository: mpapenbr/iracelog-web
  resourcesPreset: micro
  containerPorts:
    http: 80
  service:
    type: ClusterIP
    ports:
      http: 80
    nodePorts:
      http: ""
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerClass: ""
    loadBalancerSourceRanges: []
    annotation: {}
    extraPorts: []
  ingress:
    enabled: true
    hostname: iracelog.local
    path: "/"
    pathType: Prefix
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
      traefik.ingress.kubernetes.io/router.tls: "true"
    tls: true

# configuration values for bitnami/postgres helm chart
postgresql:
  enabled: false
  auth:
    database: postgres
    postgresPassword: null

  metrics:
    enabled: false
  primary:
    resourcesPreset: micro
    # resources:
    #   requests:
    #     memory: 200Mi
    #   limits:
    #     memory: 2Gi
    #     cpu: 1500m

    extraEnvVarsSecret: "my-iracelog-app-postgres-secret"
    initdb:
      scripts:
        init.sql: |
          CREATE EXTENSION "uuid-ossp"; 
          \connect template1;
          CREATE EXTENSION "uuid-ossp";
    extendedConfiguration: |
      shared_buffers = 512MB
      work_mem = 30MB
      fsync = off
