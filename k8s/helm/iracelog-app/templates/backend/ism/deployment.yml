{{- /*
Copyright Broadcom, Inc. All Rights Reserved.
SPDX-License-Identifier: APACHE-2.0
*/}}
{{- if .Values.ism.enabled }}
apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ template "iracelog-app.ism.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
    app.kubernetes.io/part-of: iracelog-app
    app.kubernetes.io/component: backend
    app.kubernetes.io/subcomponent: ism
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.ism.replicaCount }}
  {{- $podLabels := include "common.tplvalues.merge" ( dict "values" ( list .Values.podLabels .Values.commonLabels ) "context" . ) }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" ( dict "customLabels" $podLabels "context" $ ) | nindent 6 }}
      app.kubernetes.io/part-of: iracelog-app
      app.kubernetes.io/component: backend
      app.kubernetes.io/subcomponent: ism
  
  {{- if .Values.updateStrategy }}
  strategy: {{- toYaml .Values.updateStrategy | nindent 4 }}
  {{- end }}
  template:
    metadata:
      labels: {{- include "common.labels.standard" ( dict "customLabels" $podLabels "context" $ ) | nindent 8 }}
        app.kubernetes.io/part-of: iracelog-app
        app.kubernetes.io/component: backend
        app.kubernetes.io/subcomponent: ism
      {{- if .Values.ism.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .Values.ism.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
    spec:
      initContainers:
      - name: dbinit
        image: {{ template "ism.image" . }}        
        envFrom:
          - secretRef:
                name: {{ template "iracelog-app.ism.fullname" . }}
          - configMapRef: 
                name: {{ template "iracelog-app.ism.fullname" . }}
        env:
          - name: ISM_DB
            value: "postgresql://postgres:$(DB_USER_PASSWORD)@{{ .Release.Name }}-postgresql:5432/postgres"                
        args: [ "migrate", "--log-level", "debug"]

      containers:
        - name: ism
          image: {{ template "ism.image" . }}
          imagePullPolicy: IfNotPresent
          {{- if .Values.ism.resources }}
          resources: {{- include "common.tplvalues.render" (dict "value" .Values.ism.resources "context" $) | nindent 12 }}
          {{- else if ne .Values.ism.resourcesPreset "none" }}
          resources: {{- include "common.resources.preset" (dict "type" .Values.ism.resourcesPreset) | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.ism.containerPorts.http }}
          
          {{- if .Values.ism.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.ism.customLivenessProbe "context" $) | nindent 12 }}
          {{- else if .Values.ism.livenessProbe.enabled }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.ism.livenessProbe "enabled") "context" $) | nindent 12 }}
            grpc:
              port: {{ .Values.ism.containerPorts.grpc }}
          {{- end }}
          {{- if .Values.ism.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.ism.customReadinessProbe "context" $) | nindent 12 }}
          {{- else if .Values.ism.readinessProbe.enabled }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.ism.readinessProbe "enabled") "context" $) | nindent 12 }}
            grpc:
              port: {{ .Values.ism.containerPorts.grpc }}              
          {{- end }}
          {{- if .Values.ism.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.ism.customStartupProbe "context" $) | nindent 12 }}
          {{- else if .Values.ism.startupProbe.enabled }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.ism.startupProbe "enabled") "context" $) | nindent 12 }}
            grpc:
              port: {{ .Values.ism.containerPorts.grpc }}
          {{- end }}
                    
          {{- if .Values.ism.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.auth.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          volumeMounts:
            # this looks strange but it works to replace a config file 
            - name: config-volume
              mountPath: /config
              
          
          envFrom:
            - secretRef:
                  name: {{ template "iracelog-app.ism.fullname" . }}            
          env:
            - name: ISM_DB
              value: "postgresql://postgres:$(DB_USER_PASSWORD)@{{ .Release.Name }}-postgresql:5432/postgres"                
            {{- if .Values.ism.otlp.enabled }}
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: "metadata.labels['app.kubernetes.io/subcomponent']"

            - name: OTEL_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_POD_UID
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.uid
            
                  
            {{- if .Values.ism.otlp.endpoint }}
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: {{ .Values.ism.otlp.endpoint | quote }}
            {{- end }}
            - name: OTEL_EXPORTER_OTLP_INSECURE
              value: {{ not .Values.ism.otlp.tls.enabled | quote }}
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: "service.name=$(OTEL_SERVICE_NAME),service.namespace=$(OTEL_NAMESPACE),service.instance.id=$(OTEL_POD_UID)"
            {{- end }}
          args: 
            - "grpc"
            - "--config"
            - "/config/config.yaml"
            - "--log-level"
            - "debug"
            - "-a"
            -  "0.0.0.0:{{ .Values.ism.containerPorts.http }}"
            {{- if .Values.ism.otlp.enabled }}
            - "--enable-telemetry"
            {{- end }}
            {{- if .Values.ism.nats.enabled }}
            - "--enable-nats"
            - "--nats-url"
            - "nats://{{ .Release.Name }}-nats:{{ .Values.nats.service.ports.client }}"
            {{- end }}

      volumes:
        - name: config-volume
          configMap:
            name: {{ template "iracelog-app.ism.fullname" . }}
{{- end }}