{{- /*
Copyright Broadcom, Inc. All Rights Reserved.
SPDX-License-Identifier: APACHE-2.0
*/}}
{{- if .Values.graphql.enabled }}
apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ template "iracelog-app.graphql.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
    app.kubernetes.io/part-of: iracelog-app
    app.kubernetes.io/component: backend
    app.kubernetes.io/subcomponent: graphql
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.graphql.replicaCount }}
  {{- $podLabels := include "common.tplvalues.merge" ( dict "values" ( list .Values.podLabels .Values.commonLabels ) "context" . ) }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" ( dict "customLabels" $podLabels "context" $ ) | nindent 6 }}
      app.kubernetes.io/part-of: iracelog-app
      app.kubernetes.io/component: backend
      app.kubernetes.io/subcomponent: graphql
  
  {{- if .Values.updateStrategy }}
  strategy: {{- toYaml .Values.updateStrategy | nindent 4 }}
  {{- end }}
  template:
    metadata:
      labels: {{- include "common.labels.standard" ( dict "customLabels" $podLabels "context" $ ) | nindent 8 }}
        app.kubernetes.io/part-of: iracelog-app
        app.kubernetes.io/component: backend
        app.kubernetes.io/subcomponent: graphql
    spec:
      containers:
        - name: graphql
          image: {{ template "graphql.image" . }}
          imagePullPolicy: IfNotPresent
          {{- if .Values.graphql.resources }}
          resources: {{- include "common.tplvalues.render" (dict "value" .Values.graphql.resources "context" $) | nindent 12 }}
          {{- else if ne .Values.graphql.resourcesPreset "none" }}
          resources: {{- include "common.resources.preset" (dict "type" .Values.graphql.resourcesPreset) | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.graphql.containerPorts.http }}

          {{- if .Values.graphql.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.graphql.customLivenessProbe "context" $) | nindent 12 }}
          {{- else if .Values.graphql.livenessProbe.enabled }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.graphql.livenessProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              port: {{ .Values.graphql.containerPorts.http }}
              path: /healthz
          {{- end }}
          {{- if .Values.graphql.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.graphql.customReadinessProbe "context" $) | nindent 12 }}
          {{- else if .Values.graphql.readinessProbe.enabled }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.graphql.readinessProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              port: {{ .Values.graphql.containerPorts.http }}
              path: /healthz
          {{- end }}
          {{- if .Values.graphql.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.graphql.customStartupProbe "context" $) | nindent 12 }}
          {{- else if .Values.graphql.startupProbe.enabled }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.graphql.startupProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              port: {{ .Values.graphql.containerPorts.http }}
              path: /healthz
          {{- end }}
          
          {{- if .Values.graphql.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.graphql.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          volumeMounts:
            # this looks strange but it works to replace a config file 
            - name: config-volume
              mountPath: /config
              

          envFrom:
            - secretRef:
                  name: {{ template "iracelog-app.graphql.fullname" . }}            
          env:
            - name: IGQL_DB
              value: "postgresql://postgres:$(DB_USER_PASSWORD)@{{ .Release.Name }}-postgresql:5432/postgres"                
          args: 
            - "server"
            - "--config"
            - "/config/config.yaml"            
            - "--log-level"
            - "debug"            
            - "-a"
            -  "0.0.0.0:8080"

      volumes:
        - name: config-volume
          configMap:
            name: {{ template "iracelog-app.graphql.fullname" . }}
{{- end }}